{{>home/header}}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<style>
    @-webkit-keyframes rotating

    /* Safari and Chrome */
        {
        from {
            -webkit-transform: rotate(0deg);
            -o-transform: rotate(0deg);
            transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
            -o-transform: rotate(360deg);
            transform: rotate(360deg);
        }
    }

    @keyframes rotating {
        from {
            -ms-transform: rotate(0deg);
            -moz-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            -o-transform: rotate(0deg);
            transform: rotate(0deg);
        }

        to {
            -ms-transform: rotate(360deg);
            -moz-transform: rotate(360deg);
            -webkit-transform: rotate(360deg);
            -o-transform: rotate(360deg);
            transform: rotate(360deg);
        }
    }

    .rotating {
        -webkit-animation: rotating 2s linear infinite;
        -moz-animation: rotating 2s linear infinite;
        -ms-animation: rotating 2s linear infinite;
        -o-animation: rotating 2s linear infinite;
        animation: rotating 2s linear infinite;
    }

    #detailed-status-list li:before {
        content: '‚úÖ';
        margin-left: -20px;
        margin-right: 10px;
    }

    audio {
        display: inline-block !important;
        position: relative !important;
        top: 9px !important;
        width: calc(100% - 120px) !important;
    }

    #grantPermissions:hover {
        text-decoration: underline;
    }

    #feedbacks {
        transition: 2s;
    }
</style>

<main class="mt-3 py-4 px-2">
    <div class="container">

        <audio id="received_audio" autoplay></audio>
        <audio id="local_audio" autoplay muted></audio>
        <!--- Metas -->
        <input id="my-mail" type="hidden" value="{{ self_data.2.0 }}">
        <input id="target-mail" type="hidden" value="{{ self_data.2.1 }}">
        <input id="call-id" type="hidden" value="{{ self_data.1.0.call_id }}">
        <input id="clerk-id" type="hidden" value="{{ self_data.1.0.clerk_id }}">
        <input id="client-id" type="hidden" value="{{ self_data.1.0.user_id }}">
        <!--- Metas -->

        <a id="download" href="#" style="display: none !important;">Download</a>
        <div class="row">
            <div class="col-lg-12 py-4 pr-4">
                <div class="row">
                    <div class="col-lg-1 d-flex justify-content-center">
                        <img class="ml-lg-4 img-fluid mobile-behave-img" src="/assets/img/ciganinha.png">
                    </div>
                    <div class="col-lg-8 pl-4 mt-1">
                        <h3>
                            Ol√° <strong id="client-name"> {{self_data.0.0.user_name}}</strong> <br> Desejamos uma boa
                            consulta por voz! üòâ
                        </h3>
                    </div>
                    <div id="faq-chat" class="col-lg-3 d-none d-lg-block">
                        <div class="float-right text-right mr-2">
                            <p> Quer umas dicas? ü§î <br>
                                <button id="faq-chat-btn" class="btn btn-sm text-right d-none" data-toggle="modal"
                                    data-target="faq-chat-modal">Clique para ver dicas de atendimento üòâ</button>
                            </p>
                        </div>
                    </div>
                </div>
                <hr>
            </div>
            <div class="col-lg-6">
                <img style="width: 100%;" class="ml-2 text-center  mb-4" src="/assets/home/img/logo-topo.png">
                <div class="alert alert-info mt-2">
                    <div class="row">
                        <div class="col-lg-5">
                            <strong>
                                J√° Ganho: ‚Ç¨<span id="chat-owned-minutes">0,00</span>
                            </strong>
                        </div>
                        <div class="d-none d-lg-block col-lg-7 alert-success"
                            style="border-radius: 30px; border: 1px solid white;">
                            <i class="fas fa-money-bill-wave"></i> Voc√™ recebe por minuto: ‚Ç¨ <span
                                id="site-chat-min-val"></span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="progress ml-2 mt-2">
                                <div id="credits-bar-balance" data-toggle="tooltip" data-placement="top"
                                    class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar">
                                </div>
                                <div id="credits-bar-owned" data-toggle="tooltip" data-placement="top"
                                    class="progress-bar progress-bar-striped progress-bar-animated bg-success"
                                    role="progressbar"></div>
                            </div>
                            <small class="d-block d-lg-none alert-danger text-center">Clique na bara para ver
                                valores.</small>

                        </div>
                    </div>
                </div>
                <div class="collapse" id="auth-rolling">
                    <div class="alert alert-danger">
                        <h5 class="text-center my-2 ">Suas permiss√µes de audio: <br><span id="permision-status">N√£o
                                Autorizado
                                <br> <a id="grantPermissions" role="button"
                                    class="btn btn-danger my-2 take-attention animate__animated animate__tada text-white">Clique
                                    aqui para autorizar</a> </span>
                            **
                        </h5>

                        <small>** A chamada n√£o iniciar√° enquanto voc√™ n√£o fornecer as autoriza√ß√µes necess√°rias.<br> <a
                                id="permissions-help" class="d-none " href="#">Clique aqui para obter ajuda.</a></small>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="after-permissions py-2 px-1 mt-4">
                    <div id="feedbacks" class="alert alert-danger">
                        <h5 id="waiting-client" class="collapse show text-center my-2 "><i
                                class="rotating fas fa-hourglass my-auto mr-3"></i>
                            Esperando o
                            cliente entrar na
                            chamada... *

                            <hr>
                        </h5>
                        <strong>Detalhes da chamada:</strong>
                        <ul id="detailed-status-list">

                        </ul>
                        <button class="btn btn-block btn-danger btn-sm" id="hangup-button" role="button" disabled>
                            Encerrar chamada
                        </button>
                        <button class="btn btn-block btn-danger btn-sm" id="leave-button" role="button">
                            Sair da SALA
                        </button>
                    </div>
                    <small id="no-client-warning" class="alert-danger">* Caso o cliente n√£o entre em um minuto, voc√™
                        ser√° retirado desta tela e
                        nada lhe ser√° creditado.</small>
                </div>
            </div>
        </div>
        <!-- Meta Client -->
        <div id="meta-client" class="row d-none mt-0 justify-content-center">
            <div class="col-lg-12 px-4">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <div class="col-lg-8">
                                <h5> <span class="d-none d-lg-block">Informa√ß√µes do seu cliente üíÅ‚Äç‚ôÇÔ∏è</span></h5>
                            </div>
                            <div class="col-lg-4">
                                <button id="collapse-button-listner"
                                    class="float-right btn btn-block btn-sm btn-primary collapsed" type="button"
                                    data-toggle="collapse" data-target="#collapse-client-information"
                                    aria-expanded="true" aria-controls="collapseExample">
                                    üëÄ Mostrar informa√ß√µes
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body collapse" id="collapse-client-information">
                        <div class="row">
                            <div class="col-lg-4">
                                <h6>üòé Outras informa√ß√µes:</h6>
                                <hr>
                                <strong> Nome: </strong> <span class="user_name"></span> <br>
                                <strong> Anivers√°rio: </strong> <span class="user_birthdate"></span> <br>
                                <strong> G√™nero: </strong> <span class="user_genre"></span> <br>
                            </div>
                            <div class="col-lg-4 alert alert-info">
                                <h5>üí∞ Saldo do cliente: ‚Ç¨ <strong id="client-total-balance"></strong></h5>
                                <hr>
                                <div class="">
                                    <div class="progress mt-2">
                                        <div id="client-credits-bar-balance" data-toggle="tooltip" data-placement="top"
                                            class="progress-bar progress-bar-striped progress-bar-animated"
                                            role="progressbar">
                                        </div>
                                        <div id="client-credits-bar-bonus" data-toggle="tooltip" data-placement="top"
                                            class="progress-bar progress-bar-striped progress-bar-animated bg-success"
                                            role="progressbar"></div>
                                    </div>
                                    <div class="mt-2">
                                        <small class="alert-danger">‚ö†Ô∏è Essa se√ß√£o ser√° ativada ap√≥s 1 minuto de
                                            chat</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4 alert alert-success">
                                <h5>üìä Performance:</h5>
                                <hr>
                                <div class="">
                                    <div class="progress mt-2">
                                        <div id="left-time" data-toggle="tooltip" data-placement="top"
                                            class="progress-bar bg-warning progress-bar-striped progress-bar-animated"
                                            role="progressbar">
                                        </div>
                                        <div id="earned-time" data-toggle="tooltip" data-placement="top"
                                            class="progress-bar progress-bar-striped progress-bar-animated bg-success"
                                            role="progressbar"></div>
                                    </div>
                                    <div class="mt-2">
                                        <small class="alert-danger">‚åõ M√°x. de atendimento: <span
                                                id="client-max-time"></span> min.</small>
                                        <small class="float-right alert-info">Feitos: <strong
                                                id="total-time"></strong></small>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <a id="download" href="#" style="display: none !important;">Download</a>
    <div class="empty-container"></div>
    </div>
</main>

{{>home/footer}}

<script src="/assets/js/adapter.js"></script>
<script type="text/javascript">
    const mediaConstraints = {
        audio: true,
        video: false
    };

    function log(text) {
        var time = new Date();

        console.log("[" + time.toLocaleTimeString() + "] " + text);
    }

    function log_error(text) {
        var time = new Date();

        console.trace("[" + time.toLocaleTimeString() + "] " + text);
    }

    function reportError(errMessage) {
        log_error(`Error ${errMessage.name}: ${errMessage.message}`);
    }

    /* Bug solvers */
    var offered = 0;
    var answered = 0;

    var my_mail = null;
    var target_mail = null;

    /* 2th step - WebRTC implementations */
    var myPeerConnection = null;    /* RTCPeerConnection       */
    var transceiver = null;         /* RTCRtpTransceiver       */
    var microphoneStream = null;    /* MediaStream from webcam */
    var socket = null;

    /* Audio Recorder */
    var blobs;
    var blob;
    var rec;
    var stream;

    /* RECORD both audio sources */
    function mergeAudioStreams(localStream, remoteStream) {
        const context = new AudioContext();
        const destination = context.createMediaStreamDestination();

        if (localStream && localStream.getAudioTracks().length > 0) {
            const source1 = context.createMediaStreamSource(localStream);
            source1.connect(destination);
        }

        if (remoteStream && remoteStream.getAudioTracks().length > 0) {
            const source2 = context.createMediaStreamSource(remoteStream);
            source2.connect(destination);
        }
        return destination.stream.getAudioTracks();
    }

    $(document).ready(async function () {
        try {
            /**
            @func
            ---- @name anonymous (could be meta data generator)
            ---- @description Update the vars with its needed variables to give right meta informations.
            ---- @receiveis  JSON structure with a tuple, ((Array(sysuser)),(Array(call)),Array((my_mail, target_mail)), value))
            -------------------------
            @returns void
            */
            var chat_id = parseInt(window.location.pathname.split("/").pop());

            const data = await $.get("/voip-meta-info/" + chat_id, function (data) {
                return console.log(data);
            });

            /* Meta Info for WebRTC */
            const my_mail = data[2][0];
            const target_mail = data[2][1];

            /* Call Meta Info */
            const call_id = chat_id;
            const clerk_id = data[1][0].clerk_id;
            const client_id = data[1][0].user_id;


            function calculate_payout(rate, value) {
                $("#site-chat-min-val").html("<strong>" + parseFloat((parseFloat(value) * parseFloat(rate)) / 100).toFixed(2).replace(".", ",") + "</strong>")
            }


            /* 
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             */

            /**
                   @func 
                   * @name credits_bar Represents the clerk bar, will grow over owned
                   * @desc Will draw the bar, and the credits (by a text) 
                   * @bindsto  #credits-bar-balance 
                   * @bindsto  #credits-bar-owned
                   -------------------------
                   * @param {Float 64} balance           || The balance (paid) that corresponds to the owned on the bar.
                   * @param {Float 64} owned             || The amount that corresponds to the owned on the bar.
                   -------------------------
                   * @returns {void}
               **
               */
            function credits_bar(balance, owned) {

                /* To a better behave on no balance */
                if (owned > 0) {
                    /* Proportion */
                    var owned_proportion = ((balance * 100) / (balance + owned)) - 100;
                    var balance_proportion = ((owned * 100) / (balance + owned)) - 100;


                    /* The implementation to update the paid-balance */
                    $("#credits-bar-balance").attr("style", "width:" + (balance_proportion * -1) + "%");

                    /* Balance tooltip */
                    $("#credits-bar-balance").attr("data-original-title", "Seu saldo inicial era ‚Ç¨" + parseFloat(balance).toFixed(2).replace(".", ",") + " Agora o total √© (ganho + inicial): ‚Ç¨" + parseFloat(balance + owned).toFixed(2).replace(".", ","));
                    $("#credits-bar-balance").tooltip();


                    /* The implementation to update the owned-balance */
                    $("#credits-bar-owned").attr("style", "width:" + (owned_proportion * -1) + "%");


                    /* owned tooltip */
                    $("#credits-bar-owned").attr("data-original-title", "Seu saldo ganho neste chat ‚Ç¨" + parseFloat(owned).toFixed(2).replace(".", ","));
                    $("#credits-bar-owned").tooltip();

                } else {
                    var balance_proportion = 1;
                    /* The implementation to update the paid-balance */
                    $("#credits-bar-balance").attr("style", "width:" + (balance_proportion * 100) + "%");


                    /* The implementation to update the owned-balance */
                    $("#credits-bar-owned").attr("style", "width:" + (0) + "%");
                    $("#credits-bar-owned").attr("data-original-title", "Seu saldo ganho por b√¥nus ‚Ç¨0,00");


                    /* Balance tooltip */
                    $("#credits-bar-balance").attr("data-original-title", "Seu saldo inicial √© ‚Ç¨" + parseFloat(balance).toFixed(2).replace(".", ","));
                    $("#credits-bar-balance").tooltip();

                }
            }


            const comission_rate = await $.get("/get-my-comission-rate", (data) => {
                return data;
            });

            const valMin = data[3];
            const valMinChat = data[3];
            var clientInitialBalance = 0;
            var timeEnrolled = 0;

            calculate_payout(comission_rate, valMin);


            /* My balance will change over time, thats why we had to change this back to var from a const statement */
            var totalBalance = await $.get("/my-credits", function (e) {
                return e;
            });

            /* First bar Draw */
            const myInitialBalance = (parseFloat(totalBalance[0][0]) + parseFloat(totalBalance[0][1])).toFixed(2);
            credits_bar(myInitialBalance, 0);


            /* 
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  MYBARS  
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            */


            /* 
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            */
            /** @var bntSate => records collapse button state */
            var btnState = 0;
            $(document).on("click", "#collapse-button-listner", function (e) {
                if (btnState) {
                    /* Change to show */
                    $(e.target).text("üëÄ Mostrar informa√ß√µes");
                    btnState = 0;
                } else {
                    $(e.target).text("üôà Esconder informa√ß√µes");
                    /* Change to hide */
                    btnState = 1;
                }
            });

            /* To make this jonkeys-free */
            $('#grantPermissions').on('animationend', async function (e) {
                $(e.target).removeClass("animate__animated animate__tada");

                await new Promise(function (r) {
                    setTimeout(r, 500)
                });

                $(e.target).addClass("animate__animated animate__tada")
            });


            /** @func Infos from our client */
            $.post('/get_client_info', { client_id: client_id }, function (response) {
                response = JSON.parse(response);
                $('.user_name').html(response[0][0]['user_name']);
                $('.user_birthdate').html(response[0][0]['user_birthdate'].split("-").reverse().join("/"));
                $('.user_genre').html(response[0][0]['user_genre']);
                $('.address_state').html(response[0][1]['address_state']);
                $('.address_city').html(response[0][1]['address_city']);
            });

            function bar_color(amount) {
                if ((amount / valMinChat) > 3 && (amount / valMinChat) <= 10) {
                    /* The implementation to update the paid-balance */
                    $("#client-credits-bar-balance").addClass('bg-warning');
                } else if ((amount / valMinChat) <= 3) {
                    /* The implementation to update the paid-balance */
                    $("#client-credits-bar-balance").addClass('bg-danger');
                }
            }
            /**
                 @func 
                 * @name client_credits_bar A good name, I do think
                 * @desc Will draw the bar, and the credits (by a text) 
                 * @bindsto  #credits-bar-balance 
                 * @bindsto  #credits-bar-owned
                 -------------------------
                 * @param {Float 64} balance           || The balance (paid) that corresponds to the owned on the bar.
                 * @param {Float 64} owned             || The amount that corresponds to the owned on the bar.
                 -------------------------
                 * @returns {void}
             **
             */

            function time_bar(balance, bonus) {
                /* To a better behave on no balance */
                if (bonus > 0) {
                    /* Proportion */
                    var bonus_proportion = ((balance * 100) / (balance + bonus)) - 100;
                    var balance_proportion = ((bonus * 100) / (balance + bonus)) - 100;


                    /* The implementation to update the paid-balance */
                    $("#left-time").attr("style", "width:" + (balance_proportion * -1) + "%");

                    /* Balance tooltip */
                    $("#left-time").attr("data-original-title", "Tempo restante (minutos): " + parseInt(balance));
                    $("#left-time").tooltip();


                    /* The implementation to update the bonus-balance */
                    $("#earned-time").attr("style", "width:" + (bonus_proportion * -1) + "%");


                    /* Bonus tooltip */
                    $("#earned-time").attr("data-original-title", "Tempo Decorrido (minutos): " + parseInt(bonus));
                    $("#earned-time").tooltip();

                } else {
                    var balance_proportion = 1;
                    /* The implementation to update the paid-balance */
                    $("#left-time").attr("style", "width:" + (balance_proportion * 100) + "%");


                    /* The implementation to update the bonus-balance */
                    $("#earned-time").attr("style", "width:" + (0) + "%");
                    $("#earned-time").attr("data-original-title", "Tempo Decorrido (minutos): ");


                    /* Balance tooltip */
                    $("#left-time").attr("data-original-title", "Tempo restante (minutos): " + parseInt(balance));
                    $("#left-time").tooltip();

                }

                //bar_color(balance + bonus);
            }

            /**
                   @func 
                   * @name client_credits_bar A good name, I do think
                   * @desc Will draw the bar, and the credits (by a text) 
                   * @bindsto  #credits-bar-balance 
                   * @bindsto  #credits-bar-owned
                   -------------------------
                   * @param {Float 64} balance           || The balance (paid) that corresponds to the owned on the bar.
                   * @param {Float 64} owned             || The amount that corresponds to the owned on the bar.
                   -------------------------
                   * @returns {void}
               **
               */



            function client_credits_bar(balance, bonus) {
                /* To a better behave on no balance */
                if (bonus > 0) {
                    /* Proportion */
                    var bonus_proportion = ((balance * 100) / (balance + bonus)) - 100;
                    var balance_proportion = ((bonus * 100) / (balance + bonus)) - 100;


                    /* The implementation to update the paid-balance */
                    $("#client-credits-bar-balance").attr("style", "width:" + (balance_proportion * -1) + "%");

                    /* Balance tooltip */
                    $("#client-credits-bar-balance").attr("data-original-title", "Saldo pago ‚Ç¨" + parseFloat(balance).toFixed(2).replace(".", ","));
                    $("#client-credits-bar-balance").tooltip();


                    /* The implementation to update the bonus-balance */
                    $("#client-credits-bar-bonus").attr("style", "width:" + (bonus_proportion * -1) + "%");


                    /* Bonus tooltip */
                    $("#client-credits-bar-bonus").attr("data-original-title", "Saldo ganho por b√¥nus ‚Ç¨" + parseFloat(bonus).toFixed(2).replace(".", ","));
                    $("#client-credits-bar-bonus").tooltip();

                } else {
                    var balance_proportion = 1;
                    /* The implementation to update the paid-balance */
                    $("#client-credits-bar-balance").attr("style", "width:" + (balance_proportion * 100) + "%");


                    /* The implementation to update the bonus-balance */
                    $("#client-credits-bar-bonus").attr("style", "width:" + (0) + "%");
                    $("#client-credits-bar-bonus").attr("data-original-title", "Saldo por b√¥nus ‚Ç¨0,00");


                    /* Balance tooltip */
                    $("#client-credits-bar-balance").attr("data-original-title", "Saldo pago ‚Ç¨" + parseFloat(balance).toFixed(2).replace(".", ","));
                    $("#client-credits-bar-balance").tooltip();

                }

                bar_color(balance + bonus);

                /* Draw things into the user view */
                $("#client-total-balance").html((parseFloat(balance + bonus).toFixed(2).replace('.', ',')));
            }

            /**
                   @func 
                   * @name credits_bar Represents the clerk bar, will grow over owned
                   * @desc Will draw the bar, and the credits (by a text) 
                   * @bindsto  #credits-bar-balance 
                   * @bindsto  #credits-bar-owned
                   -------------------------
                   * @param {Float 64} balance           || The balance (paid) that corresponds to the owned on the bar.
                   * @param {Float 64} owned             || The amount that corresponds to the owned on the bar.
                   -------------------------
                   * @returns {void}
               **
               */

            function credits_bar(balance, owned) {

                /* To a better behave on no balance */
                if (owned > 0) {
                    /* Proportion */
                    var owned_proportion = ((balance * 100) / (balance + owned)) - 100;
                    var balance_proportion = ((owned * 100) / (balance + owned)) - 100;


                    /* The implementation to update the paid-balance */
                    $("#credits-bar-balance").attr("style", "width:" + (balance_proportion * -1) + "%");

                    /* Balance tooltip */
                    $("#credits-bar-balance").attr("data-original-title", "Seu saldo inicial era ‚Ç¨" + parseFloat(balance).toFixed(2).replace(".", ",") + " Agora o total √© (ganho + inicial): ‚Ç¨" + parseFloat(balance + owned).toFixed(2).replace(".", ","));
                    $("#credits-bar-balance").tooltip();


                    /* The implementation to update the owned-balance */
                    $("#credits-bar-owned").attr("style", "width:" + (owned_proportion * -1) + "%");


                    /* owned tooltip */
                    $("#credits-bar-owned").attr("data-original-title", "Seu saldo ganho neste chat ‚Ç¨" + parseFloat(owned).toFixed(2).replace(".", ","));
                    $("#credits-bar-owned").tooltip();

                } else {
                    var balance_proportion = 1;
                    /* The implementation to update the paid-balance */
                    $("#credits-bar-balance").attr("style", "width:" + (balance_proportion * 100) + "%");


                    /* The implementation to update the owned-balance */
                    $("#credits-bar-owned").attr("style", "width:" + (0) + "%");
                    $("#credits-bar-owned").attr("data-original-title", "Seu saldo ganho por b√¥nus ‚Ç¨0,00");


                    /* Balance tooltip */
                    $("#credits-bar-balance").attr("data-original-title", "Seu saldo inicial √© ‚Ç¨" + parseFloat(balance).toFixed(2).replace(".", ","));
                    $("#credits-bar-balance").tooltip();

                }
            }

            /* 
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT  CLIENT
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            */


            /* States */

            var firstRun = 1;
            var hasShownUp = 0;

            async function shownUp() {
                if (firstRun) {
                    await new Promise(function (r) {
                        setTimeout(r, 60000);
                    });
                    firstRun = 0;
                    shownUp();
                } else {
                    if (!hasShownUp) {
                        await $.get("/register-event-by-clerk/2", function (e) { });
                        window.location = "/atendimento";
                    }
                }
            }
            shownUp();

            var auth = false;
            var client_ready = false;
            var client_verification = false;

            function socket_messages_generator(status) {
                return {
                    id: call_id,
                    from: my_mail,
                    to: target_mail,
                    type: status
                };
            }

            /* Web socket implementations */
            /* Login into the socket and says hey, I'm here folks */
            const web_socket_host = "wss://voice." + window.location.host.replace("www.", "") + "/ws";
            socket = new WebSocket(web_socket_host);

            socket.onopen = function (event) {
                /* Let use JSON strings everywhere */
                socket.send(JSON.stringify(socket_messages_generator('im-in')));
                socket.send(JSON.stringify(socket_messages_generator('are-you-there')))
            };

            var no_processed = 1;


            socket.onmessage = async function (event) {
                var content = JSON.parse(event.data);
                switch (content.type) {
                    /* Live status switcher */
                    case "are-you-there":
                        socket.send(JSON.stringify(socket_messages_generator('im-in')));
                        break;
                    case "im-in":
                        if (content.from == target_mail) {
                            hasShownUp = 1;
                            if (!client_verification) {
                                client_verification = true;
                                $("#detailed-status-list").append('<li class="animate__animated animate__fadeInRight"> O <b> Cliente </b> entrou na sala...</li>');
                                $("#waiting-client").collapse('hide');

                                $("#feedbacks").removeClass("alert-danger").addClass("alert-info");
                                $("#no-client-warning").addClass("animate__animated animate__fadeOut")
                            } /* stands for the view drawing status  */
                        } /* else do nothing, not our call rolling on. */
                        break;
                    case "im-ready":
                        if (content.from == target_mail) {
                            $("#detailed-status-list").append('<li class="animate__animated animate__fadeInRight"> O <b>Cliente</b> est√° pronto para iniciar a chamada (autoriza√ß√µes garantidas)...</li>');
                            $("#detailed-status-list").append('<li class="animate__animated animate__fadeInRight"> Chamada pronta para ser iniciada, garanta suas autoriza√ß√µes primeiro clicando √† esquerda...</li>').addClass("animate__animated animate__fadeInRight");
                            $("#auth-rolling").collapse("show");
                            client_ready = true;
                        }
                        break;

                    case "audio-offer":  /* Invitation and offer to chat  */
                        //                   console.log("------------------- AUDIO ANSWER ----------------");
                        //                 console.log(content);
                        //               console.log("------------------- AUDIO ANSWER ----------------");
                        if (content.from == target_mail || content.target == my_mail || content.name == target_mail) {
                            $("#feedbacks").removeClass("alert-info").addClass("alert-success");
                            if (!offered) {
                                offered = 1;
                                handleAudioOfferMsg(content);
                            }
                        }
                        break;

                    case "audio-answer":
                        //    console.log("------------------- AUDIO ANSWER ----------------");
                        //    console.log(content);
                        //    console.log("------------------- AUDIO ANSWER ----------------");
                        if (content.from == target_mail || content.target == my_mail || content.name == target_mail) {
                            $("#feedbacks").removeClass("alert-info").addClass("alert-success");
                            if (!answered) {
                                answered = 1;
                                handleAudioAnswerMsg(content);
                            }
                        }
                        break;

                    case "new-ice-candidate": /* A new ICE candidate has been received */
                        //console.log("------------------- ICE CANDIDATE ----------------");
                        //console.log(content);
                        //console.log("------------------- ICE CANDIDATE ----------------");

                        if (content.from == target_mail || content.target == my_mail || content.name == target_mail) {
                            if (!myPeerConnection) {
                                createPeerConnection();
                            }
                            handleNewICECandidateMsg(content);

                        }
                        break;
                    case "new-transaction":
                        if (content.from == target_mail) {
                            $.get("/clerk-sign-voice-chat-transaction/" + content.transaction_id + "/", (e) => {
                                if (e) {
                                    $.get("/clerk-voice-chat-amount-owned/" + chat_id, (income) => {
                                        /* Display amount owned on this chat */
                                        credits_bar(parseFloat(myInitialBalance), parseFloat(income[0]));
                                        $("#total-time").html(timeEnrolled);
                                        if (income) {
                                            $("#chat-owned-minutes").html(parseFloat(income[0]).toFixed(2).replace('.', ','));
                                        } else {
                                            console.error("No values provided");
                                        }
                                        timeEnrolled++;

                                    });
                                } else {
                                    /* Shit happens */
                                    console.error("Error happned while parsing stuff");
                                }
                            });
                        }
                        break;
                    case "client-balance-update":
                        if (content.from == target_mail) {
                            var balance_data = content.transaction_id;
                            /* Draws bar */
                            client_credits_bar(parseFloat(balance_data[0]), parseFloat(balance_data[1]));

                            /* Make know the initial balance  */
                            if (clientInitialBalance == 0) {
                                clientInitialBalance = parseFloat(balance_data[0]) + parseFloat(balance_data[1]);
                                $("#client-max-time").html(parseInt(parseFloat(clientInitialBalance) / valMinChat));

                            }

                            time_bar(parseInt(parseInt(parseFloat(clientInitialBalance) / valMinChat) - timeEnrolled), timeEnrolled);

                            $("#total-time")
                        }
                        break;

                    case "no-more-credits":
                        if (content.from == target_mail) {
                            Swal.fire("Sem cr√©ditos.", "Os cr√©ditos do cliente acabaram, voc√™ ser√° redirecionado em 5 segundose.", "info");
                            closeAudioCall();
                            await $.get("/register-event-by-clerk/6", function (e) { });
                            await new Promise(r => setTimeout(r, 5000));
                            window.location = "/atendimento";
                        }
                        break;

                    case "hang-up":
                        if (content.from == target_mail) {
                            await $.get("/register-event-by-clerk/6", function (e) { });
                            closeAudioCall();
                        }
                        break;

                }
            }

            $(document).on("click", "#hangup-button", function () {
                hangUpCall();
            });

            $(document).on("click", "#leave-button", async function () {
                await $.get("/register-event-by-clerk/6", function (e) { });
                window.location = "/atendimento";
            })

            /* 1 step - Permissions 
                Our media constrains will only stand for audio
                video will be setted as false.
            */

            function handleGetUserMediaError(e) {
                switch (e.name) {
                    case "NotFoundError":
                        Swal.fire("Opss...", "N√£o encontramos o seu microfone, tente outro navegador.", 'error');
                        break;
                    case "SecurityError":
                        Swal.fire("Opss...", "Seu dispositivo n√£o permitiu o acesso, tente outro navegador.", 'error');
                        break;
                    case "PermissionDeniedError":
                        Swal.fire("Opss...", "Seu dispositivo n√£o permitiu o acesso, tente outro navegador.", 'error');
                        break;
                    default:
                        Swal.fire("Opss...", "Seu dispositivo n√£o permitiu o acesso, tente outro navegador.", 'error');
                        break;
                }
            }

            $(document).on('click', '#grantPermissions', async function () {
                try {
                    microphoneStream = await navigator.mediaDevices.getUserMedia(mediaConstraints);
                    document.getElementById("local_audio").srcObject = microphoneStream;
                    /* If reached this, we can change the permissions state and send over to the clerk that permissions have been granted. */
                    $("#auth-rolling").children().removeClass('alert-danger').addClass('alert-success').html('<h5 class="text-center my-2">Suas permiss√µes de audio: <span id="permision-status">Autorizado com sucesso.</h5>');
                    socket.send(JSON.stringify(socket_messages_generator('im-ready')));
                    auth = true;
                    /* If Clerk already gave auths, lets start */
                    if (client_ready) {
                        $("#detailed-status-list").append('<li> Convite do cliente recebido - Iniciando chamada.</li>');
                    }
                    await new Promise(function (r) {
                        setTimeout(r, 3000);
                    });

                    $("#auth-rolling").collapse("hide");
                    $("#meta-client").removeClass("d-none").addClass("d-flex animate__animated animate__fadeIn");

                } catch (err) {
                    handleGetUserMediaError(err);
                }
            });


            /* Another function that doesen't hold a struct like ours */
            function sendToServer(msg) {
                var msgJSON = JSON.stringify(msg);
                socket.send(msgJSON);
            }


            /* This is for knowing how to reach another peer */
            async function createPeerConnection() {
                myPeerConnection = new RTCPeerConnection({
                    iceServers: [     /* Information about ICE servers */
                        {
                            urls: [
                                "stun:stun.l.google.com:19302",
                                "stun:stun1.l.google.com:19302",
                                "stun:stun2.l.google.com:19302",
                            ]
                        },

                        {
                            url: 'turn:numb.viagenie.ca',
                            credential: 'muazkh',
                            username: 'webrtc@live.com'
                        },
                        {
                            url: 'turn:192.158.29.39:3478?transport=udp',
                            credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
                            username: '28224511:1379330808'
                        },
                        {
                            url: 'turn:192.158.29.39:3478?transport=tcp',
                            credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
                            username: '28224511:1379330808'
                        },
                        {
                            url: 'turn:turn.bistri.com:80',
                            credential: 'homeo',
                            username: 'homeo'
                        },
                        {
                            url: 'turn:turn.anyfirewall.com:443?transport=tcp',
                            credential: 'webrtc',
                            username: 'webrtc'
                        }
                    ]
                });
                // Set up event handlers for the ICE negotiation process.
                myPeerConnection.onicecandidate = handleICECandidateEvent;
                myPeerConnection.oniceconnectionstatechange = handleICEConnectionStateChangeEvent;
                myPeerConnection.onicegatheringstatechange = handleICEGatheringStateChangeEvent;
                myPeerConnection.onsignalingstatechange = handleSignalingStateChangeEvent;
                myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;
                myPeerConnection.ontrack = handleTrackEvent;
            }

            // Called by the WebRTC layer to let us know when it's time to
            // begin, resume, or restart ICE negotiation.
            async function handleNegotiationNeededEvent() {
                try {
                    const offer = await myPeerConnection.createOffer();

                    // If the connection hasn't yet achieved the "stable" state,
                    // return to the caller. Another negotiationneeded event
                    // will be fired when the state stabilizes.
                    if (myPeerConnection.signalingState != "stable") {
                        return;
                    }
                    console.log("I offer");

                    // Establish the offer as the local peer's current
                    // description.
                    await myPeerConnection.setLocalDescription(offer);
                    sendToServer({
                        name: my_mail,
                        target: target_mail,
                        type: "audio-offer",
                        sdp: myPeerConnection.localDescription
                    });
                } catch (err) {
                    console.error(err);
                };
            }

            function handleTrackEvent(event) {
                document.getElementById("received_audio").srcObject = event.streams[0];
                document.getElementById("hangup-button").disabled = false;

                const track = mergeAudioStreams(microphoneStream, event.streams[0]);
                stream = new MediaStream(track);
                console.log()
                blobs = [];
                rec = new MediaRecorder(stream, { mimeType: "audio/webm" });
                rec.start();
                rec.ondataavailable = (e) => blobs.push(e.data);

                rec.onstop = async function () {
                    var formData = new FormData();
                    formData.append('call_file', new Blob(blobs, { type: "audio/webm" }));
                    let actualUrl = window.location.pathname;
                    let callId = actualUrl.slice(6);

                    formData.append('call_id', callId); /* Call Id NEED TO PARSE. */
                    var request = new XMLHttpRequest();
                    request.open("POST", "/register-call");
                    await request.send(formData);
                }
            }
            // Handles |icecandidate| events by forwarding the specified
            // ICE candidate (created by our local ICE agent) to the other
            // peer through the signaling server.
            function handleICECandidateEvent(event) {
                if (event.candidate) {
                    sendToServer({
                        type: "new-ice-candidate",
                        target: target_mail,
                        candidate: event.candidate
                    });
                }
            }
            // Handle |iceconnectionstatechange| events. This will detect
            // when the ICE connection is closed, failed, or disconnected.
            //
            // This is called when the state of the ICE agent changes.
            async function handleICEConnectionStateChangeEvent(event) {
                switch (myPeerConnection.iceConnectionState) {
                    case "closed":
                    case "failed":
                    case "disconnected":
                        Swal.fire("Aten√ß√£o", "O cliente encerrou a chamada, voc√™ ser√° redirecionado a sua tela de atendimento", "warning");
                        await $.get("/register-event-by-clerk/2", function (e) { });

                        await closeAudioCall();
                        window.location = "/atendimento";
                        break;
                }
            }
            // Set up a |signalingstatechange| event handler. This will detect when
            // the signaling connection is closed.
            //
            // NOTE: This will actually move to the new RTCPeerConnectionState enum
            // returned in the property RTCPeerConnection.connectionState when
            // browsers catch up with the latest version of the specification!
            async function handleSignalingStateChangeEvent(event) {
                switch (myPeerConnection.signalingState) {
                    case "closed":
                        await closeAudioCall();
                        break;
                }
            }
            // Handle the |icegatheringstatechange| event. This lets us know what the
            // ICE engine is currently working on: "new" means no networking has happened
            // yet, "gathering" means the ICE engine is currently gathering candidates,
            // and "complete" means gathering is complete. Note that the engine can
            // alternate between "gathering" and "complete" repeatedly as needs and
            // circumstances change.
            //
            // We don't need to do anything when this happens, but we log it to the
            // console so you can see what's going on when playing with the sample.
            function handleICEGatheringStateChangeEvent(event) {
                console.log("*** ICE gathering state changed to: " + myPeerConnection.iceGatheringState);
            }
            // Close the RTCPeerConnection and reset variables so that the user can
            // make or receive another call if they wish. This is called both
            // when the user hangs up, the other user hangs up, or if a connection
            // failure is detected.
            async function closeAudioCall() {
                var localAudio = document.getElementById("local_audio");
                // Stops the record of voicecall
                rec.stop()
                // Close the RTCPeerConnection
                if (myPeerConnection) {

                    myPeerConnection.ontrack = null;
                    myPeerConnection.onnicecandidate = null;
                    myPeerConnection.oniceconnectionstatechange = null;
                    myPeerConnection.onsignalingstatechange = null;
                    myPeerConnection.onicegatheringstatechange = null;
                    myPeerConnection.onnotificationneeded = null;
                    // Stop the webcam preview as well by pausing the <audio>
                    // element, then stopping each of the getUserMedia() tracks
                    // on it.
                    if (localAudio.srcObject) {
                        localAudio.pause();
                        localAudio.srcObject.getTracks().forEach(track => {
                            track.stop();
                        });
                    }
                    // Close the peer connection
                    myPeerConnection.close();
                    myPeerConnection = null;
                    microphoneStream = null;
                }
                // Disable the hangup button
                document.getElementById("hangup-button").disabled = true;
                return;
            }
            // Handle the "hang-up" message, which is sent if the other peer
            // has hung up the call or otherwise disconnected.
            async function handleHangUpMsg(msg) {
                Swal.fire('Fim de chamada', 'O cliente encerrou a chamada. Voc√™ ser√° redirecionado para a p√°gina de atendimento ap√≥s o envio do arquivo de √°udio', 'info');
                await closeAudioCall();
                await $.get("/register-event-by-clerk/2", function (e) { });

                await new Promise(function (r) {
                    setTimeout(r, 5000)
                });
                window.location = "/atendimento";

            }

            async function hangUpCall() {
                sendToServer({
                    from: my_mail,
                    target: target_mail,
                    type: "hang-up"
                });
                await closeAudioCall();
                Swal.fire('Fim de chamada', 'A conex√£o foi encerrada. Voc√™ ser√° redirecionado para a p√°gina de atendimento ap√≥s o envio do arquivo de √°udio.', 'info');
                await new Promise(function (r) {
                    setTimeout(r, 5000)
                });

                window.location = "/atendimento";

            }
            // Handle a click on an item in the user list by inviting the clicked
            // user to audio chat. Note that we don't actually send a message to
            // the callee here -- calling RTCPeerConnection.addTrack() issues
            // a |notificationneeded| event, so we'll let our handler for that
            // make the offer.
            async function invite(evt) {
                if (myPeerConnection) {
                    alert("You can't start a call because you already have one open!");
                } else {
                    //var clickedUsername = evt.target.textContent;
                    // Don't allow users to call themselves, because weird.
                    // Record the username being called for future reference
                    // Call createPeerConnection() to create the RTCPeerConnection.
                    // When this returns, myPeerConnection is our RTCPeerConnection
                    // and microphoneStream is a stream coming from the camera. They are
                    // not linked together in any way yet.
                    await createPeerConnection();
                    // Get access to the webcam stream and attach it to the
                    // "preview" box (id "local_audio").
                    // Add the tracks from the stream to the RTCPeerConnection
                    try {
                        document.getElementById("local_audio").srcObject = microphoneStream;
                        microphoneStream.getTracks().forEach(
                            transceiver = track => myPeerConnection.addTransceiver(track, { streams: [microphoneStream] })
                        );
                        console.log("--------- Chamado em invite  ---------- MP TRACKS");
                        console.log(microphoneStream);
                    } catch (err) {
                        handleGetUserMediaError(err);
                    }
                }
            }

            async function handleAudioOfferMsg(msg) {
                targetUsername = msg.name;
                log("Received audio chat offer from " + targetUsername);

                if (!myPeerConnection) {
                    createPeerConnection();
                }

                var desc = new RTCSessionDescription(msg.sdp);

                /* Se a conex√£o n√£o for est√°vel, rollback */
                if (myPeerConnection.signalingState != "stable") {
                    await Promise.all([
                        myPeerConnection.setLocalDescription({ type: "rollback" }),
                        myPeerConnection.setRemoteDescription(desc)
                    ]);
                    return;
                } else {
                    await myPeerConnection.setRemoteDescription(desc);
                }

                microphoneStream.getTracks().forEach(
                    transceiver = track => myPeerConnection.addTransceiver(track, { streams: [microphoneStream] })
                );


                await myPeerConnection.setLocalDescription(await myPeerConnection.createAnswer());

                sendToServer({
                    name: my_mail,
                    target: target_mail,
                    type: "audio-answer",
                    sdp: myPeerConnection.localDescription
                });
            }

            async function handleAudioAnswerMsg(msg) {
                var desc = new RTCSessionDescription(msg.sdp);
                await myPeerConnection.setRemoteDescription(desc).catch(reportError);
            }


            async function handleNewICECandidateMsg(msg) {
                var candidate = new RTCIceCandidate(msg.candidate);

                log("*** Adding received ICE candidate: " + JSON.stringify(candidate));
                try {
                    await myPeerConnection.addIceCandidate(candidate)
                } catch (err) {
                    reportError(err);
                }
            }

        } catch (e) {
            Swal.fire("Opss...", "Seu navegador n√£o suporta estes protocolos de comunica√ß√£o, sugerimos atualiza-lo ou tentar com outro navegador", "error");
        }

    });
</script>